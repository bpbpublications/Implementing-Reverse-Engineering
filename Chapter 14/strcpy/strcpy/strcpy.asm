; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\JitenderN\REBook\strcpy\strcpy\strcpy.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG4688	DB	'ReverseEngg', 00H
$SG4690	DB	'%s', 0aH, 00H
CONST	ENDS
PUBLIC	?xstrcpy@@YAPADPADPBD@Z				; xstrcpy
; Function compile flags: /Odtp
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?xstrcpy@@YAPADPADPBD@Z PROC				; xstrcpy
; File c:\jitendern\rebook\strcpy\strcpy\strcpy.cpp
; Line 9
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 11
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN3@xstrcpy
; Line 12
	xor	eax, eax
	jmp	SHORT $LN4@xstrcpy
$LN3@xstrcpy:
; Line 15
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
$LN2@xstrcpy:
; Line 19
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@xstrcpy
; Line 21
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 22
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 1
	mov	DWORD PTR _dest$[ebp], eax
; Line 23
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
; Line 24
	jmp	SHORT $LN2@xstrcpy
$LN1@xstrcpy:
; Line 27
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx], 0
; Line 30
	mov	eax, DWORD PTR _ptr$[ebp]
$LN4@xstrcpy:
; Line 31
	mov	esp, ebp
	pop	ebp
	ret	0
?xstrcpy@@YAPADPADPBD@Z ENDP				; xstrcpy
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_main
EXTRN	_printf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_src$ = -44						; size = 12
_dest$ = -32						; size = 25
__$ArrayPad$ = -4					; size = 4
_main	PROC
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 36
	mov	eax, DWORD PTR $SG4688
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR $SG4688+4
	mov	DWORD PTR _src$[ebp+4], ecx
	mov	edx, DWORD PTR $SG4688+8
	mov	DWORD PTR _src$[ebp+8], edx
; Line 39
	lea	eax, DWORD PTR _src$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	?xstrcpy@@YAPADPADPBD@Z			; xstrcpy
	add	esp, 8
	push	eax
	push	OFFSET $SG4690
	call	_printf
	add	esp, 8
; Line 41
	xor	eax, eax
; Line 42
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
END
